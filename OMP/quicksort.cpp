#include <iostream>
#include <chrono>

using namespace std;
using namespace std::chrono;
using Clock = std::chrono::steady_clock;

int partition(int arr[], int start, int end)
{

    int pivot = arr[start];

    int count = 0;
#pragma omp parallel for num_threads(2)
    for (int i = start + 1; i <= end; i++) {
        if (arr[i] <= pivot)
            count++;
    }

    // Giving pivot element its correct position
    int pivotIndex = start + count;
    swap(arr[pivotIndex], arr[start]);

    // Sorting left and right parts of the pivot element
    int i = start, j = end;

    while (i < pivotIndex && j > pivotIndex) {

        while (arr[i] <= pivot) {
            i++;
        }

        while (arr[j] > pivot) {
            j--;
        }

        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }

    return pivotIndex;
}

void quickSort(int arr[], int start, int end)
{

    if (start >= end)
        return;

    int p = partition(arr, start, end);

    quickSort(arr, start, p - 1);

    quickSort(arr, p + 1, end);
}

void printArray(int arr[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main2()
{
    int n;
    char fake;

    printf("Input the length of the array: ");
    scanf("%d", &n);
    int arr[n];

    printf("Press F for autogenerated array ot initialize it:");
    scanf(" %c", &fake);
    if (fake == 'F')
    {
#pragma omp parallel for num_threads(2)
        for (int i = 0; i < n; i++)
        {
            arr[i] = rand() % 100;
        }
        printf("Autogenerated array: ");
        printArray(arr, n);
    }
    else
    {
        for (int i = 0; i < n; i++)
        {
            printf("arr[%d]= ", i);
            scanf("%d", &arr[i]);
        }
    }

    auto start = Clock::now();
    quickSort(arr, 0, n - 1);
    auto end = Clock::now();

    printf("Sorted array: ");
    printArray(arr, n);

    std::cout << "Time: " << duration_cast<milliseconds>(end - start).count() << std::endl;

    return 0;
}
