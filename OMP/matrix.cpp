#include <stdio.h>
#include <iostream>
#include <time.h>
#include <cstdlib>
#include <chrono>

using namespace std::chrono;
using Clock = std::chrono::steady_clock;

#define SIZE 8

void initialize(int m[SIZE][SIZE])
{
    printf("Input elements \n");
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
        {
            printf("M[%d][%d]= ", i, j);
            scanf("%d", &m[i][j]);
        }
    }
}

void generate(int m[SIZE][SIZE])
{
    for (int i = 0; i < SIZE; i++)
    {
#pragma omp parallel for num_threads(2)
        for (int j = 0; j < SIZE; j++)
        {
            m[i][j] = rand() % 100;
        }
    }
}

void print(int m[SIZE][SIZE])
{
    for (int i = 0; i < SIZE; i++)
    {
        for (int j = 0; j < SIZE; j++)
            printf("%d\t", m[i][j]);
        printf("\n");
    }
}

int main(int argc, char *argv[])
{
    int rank, nranks, from, to, i, j, k;
    int a[SIZE][SIZE], b[SIZE][SIZE], c[SIZE][SIZE];
    char fake;

    printf("Print 'F' for autogenerated matrix or input matrix");
    scanf(" %c", &fake);
    if (fake == 'F')
    {
        generate(a);
        generate(b);
    }
    else
    {
        initialize(a);
        initialize(b);
    }

    from = rank * SIZE / nranks;
    to = (rank + 1) * SIZE / nranks;

    auto start = Clock::now();

    for (i = from; i < to; i++){
        for (j = 0; j < SIZE; j++)
        {
            c[i][j] = 0;
#pragma omp parallel for num_threads(2)
            for (k = 0; k < SIZE; k++)
                c[i][j] += a[i][k] * b[k][j];
        }
    }
    auto end = Clock::now();

    printf("Multiplication of A and B: \n");
    printf("A: \n");
    print(a);
    printf("B: \n");
    print(b);
    printf("C: \n");
    print(c);

    std::cout << "Time: " << duration_cast<milliseconds>(end - start).count() << std::endl;

    return 0;
}